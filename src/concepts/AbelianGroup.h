/*    This file is part of the KUMQUAT Library -
 *    https://kumquat.inria.fr/ 
 *    - which is a licence protected library. See file LICENSE 
 *    or go to https://kumquat.inria.fr/licensing/ for full 
 *    license details.
 *
 *    Author(s):       Cl√©ment Maria
 *
 *    Copyright (C) 2024 Inria
 *
 *    Modification(s):
 *      - YYYY/MM Author: Description of the modification
 */

namespace kumquat {

/** Concept for an abelian group (algebra), with additive notation (A,+). 
 * 
 * As a group with multiplication, the concept Ring inherits all types and 
 * methods from the concept AbelianGroup. */
struct AbelianGroup : Monoid {
/** A signed integer type, in particular for the Z-module structure.*/
  typedef unspecified Integer;
/** Set a<- z*a using the Z-module structure of the group.*/
	void times_equal(Element a, Integer z);
/** Return z*a using the Z-module structure of the group.*/
	Element times(Element a, Integer z);
/** Return the additive inverse (-a) of element a. */
 Element additive_inverse(Element a);
/** Return the order of the group. It will return the number of element in a finite abelian group, or -1 in case the group is infinite. */
	Integer order();
/** Return the order of the Element a. It will return the order of the group generated by a if it is finite, or -1 if it is infinite.*/
	Integer order(Element a);
/** Return the rank of the group, i.e., the minimal number of generators. */
 Integer rank(); 
/** Convert an integer to an element of the group, equal to z*1.*/
  Element element(Integer z);
/** Check whether an element is trivial.*/
  bool trivial(Element a);
/** Check whether an integer is trivial.*/
  bool trivial(Integer a);
};

} //namespace kumquat
